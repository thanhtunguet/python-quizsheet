name: Test Application

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          pip install black
          black --check --diff .

      - name: Type checking with mypy
        run: |
          pip install mypy types-requests
          mypy main.py --ignore-missing-imports

      - name: Test imports and basic functionality
        run: |
          python -c "
          import main
          print('âœ… Application imports successfully')
          print('âœ… System prompt loaded')
          print('âœ… FastAPI app created')

          # Test system prompt loading
          from main import _load_system_prompt
          prompt = _load_system_prompt()
          assert len(prompt) > 0, 'System prompt should not be empty'
          print('âœ… System prompt loading test passed')

          # Test sheet ID extraction
          from main import _extract_sheet_id
          test_url = 'https://docs.google.com/spreadsheets/d/1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms/edit'
          sheet_id = _extract_sheet_id(test_url)
          assert sheet_id == '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms', f'Expected specific sheet ID, got {sheet_id}'
          print('âœ… Sheet ID extraction test passed')

          print('ðŸŽ‰ All tests passed!')
          "

      - name: Test health check script
        run: |
          python -c "
          import asyncio
          from healthcheck import health_check

          # Test health check function exists and is callable
          assert callable(health_check), 'health_check should be callable'
          print('âœ… Health check script test passed')
          "
